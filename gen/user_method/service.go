// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userMethod service
//
// Command:
// $ goa gen usersvr/design

package usermethod

import (
	"context"
	usermethodviews "usersvr/gen/user_method/views"

	"goa.design/goa/v3/security"
)

// The storage service makes it possible to view, add or remove wine bottles.
type Service interface {
	// register user
	Register(context.Context, *RegisterPayload) (res *ResponseResult, err error)
	// Show user info
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "changeInfo"
	Show(context.Context, *ShowPayload) (res *UserInfo, view string, err error)
	// Creates a valid JWT
	Login(context.Context, *LoginPayload) (res *Creds, err error)
	// Add new bottle and return its ID.
	ChangeInfo(context.Context, *User) (res string, err error)
	// Remove bottle from storage
	ChangePassword(context.Context, *ChangePasswordPayload) (err error)
	// Rate bottles by IDs
	ForgotPassword(context.Context, *ForgotPasswordPayload) (err error)
	// Add n number of bottles and return their IDs. This is a multipart request
	// and each part has field name 'bottle' and contains the encoded bottle info
	// to be added.
	ChangeEmail(context.Context, *ChangeEmailPayload) (res string, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "userMethod"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"register", "show", "login", "changeInfo", "changePassword", "forgotPassword", "changeEmail"}

// RegisterPayload is the payload type of the userMethod service register
// method.
type RegisterPayload struct {
	// email used to perform login
	Email string
	// Password used to perform signin
	Password string
}

// ResponseResult is the result type of the userMethod service register method.
type ResponseResult struct {
	// code
	Code int
	// message
	Message *string
	Data    map[string]string
}

// ShowPayload is the payload type of the userMethod service show method.
type ShowPayload struct {
	// JWT used for authentication
	Token string
	// View to render
	View *string
}

// UserInfo is the result type of the userMethod service show method.
type UserInfo struct {
	// ID is the unique id of the bottle.
	ID int
	// Name of bottle
	Name string
	// Vintage of bottle
	Email string
	// Description of bottle
	Icon     string
	Password *string
}

// Credentials used to authenticate to retrieve JWT token
type LoginPayload struct {
	// Username used to perform signin
	Email string
	// Password used to perform signin
	Password string
}

// Creds is the result type of the userMethod service login method.
type Creds struct {
	// JWT token
	JWT string
}

// User is the payload type of the userMethod service changeInfo method.
type User struct {
	// Name of bottle
	Name string
	// Vintage of bottle
	Email string
	// Description of bottle
	Icon string
}

// ChangePasswordPayload is the payload type of the userMethod service
// changePassword method.
type ChangePasswordPayload struct {
	// old password
	OldPassword string
	// new password
	NewPassword string
}

// ForgotPasswordPayload is the payload type of the userMethod service
// forgotPassword method.
type ForgotPasswordPayload struct {
	Code        string
	NewPassword string
}

// ChangeEmailPayload is the payload type of the userMethod service changeEmail
// method.
type ChangeEmailPayload struct {
	Email string
}

// Credentials are invalid
type Unauthorized string

// EmailExist is the type returned when user register with the email that is
// existed
type EmailExist struct {
	// Message of error
	Message string
	// email of user
	Email string
}

// NotFound is the type returned when attempting to show or delete a user that
// does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing user
	ID string
}

// password is error
type PasswordError string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e *EmailExist) Error() string {
	return "EmailExist is the type returned when user register with the email that is existed"
}

// ErrorName returns "EmailExist".
func (e *EmailExist) ErrorName() string {
	return e.Message
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a user that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// Error returns an error description.
func (e PasswordError) Error() string {
	return "password is error"
}

// ErrorName returns "passwordError".
func (e PasswordError) ErrorName() string {
	return "passwordError"
}

// NewUserInfo initializes result type UserInfo from viewed result type
// UserInfo.
func NewUserInfo(vres *usermethodviews.UserInfo) *UserInfo {
	var res *UserInfo
	switch vres.View {
	case "default", "":
		res = newUserInfo(vres.Projected)
	case "changeInfo":
		res = newUserInfoChangeInfo(vres.Projected)
	}
	return res
}

// NewViewedUserInfo initializes viewed result type UserInfo from result type
// UserInfo using the given view.
func NewViewedUserInfo(res *UserInfo, view string) *usermethodviews.UserInfo {
	var vres *usermethodviews.UserInfo
	switch view {
	case "default", "":
		p := newUserInfoView(res)
		vres = &usermethodviews.UserInfo{p, "default"}
	case "changeInfo":
		p := newUserInfoViewChangeInfo(res)
		vres = &usermethodviews.UserInfo{p, "changeInfo"}
	}
	return vres
}

// newUserInfo converts projected type UserInfo to service type UserInfo.
func newUserInfo(vres *usermethodviews.UserInfoView) *UserInfo {
	res := &UserInfo{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Icon != nil {
		res.Icon = *vres.Icon
	}
	return res
}

// newUserInfoChangeInfo converts projected type UserInfo to service type
// UserInfo.
func newUserInfoChangeInfo(vres *usermethodviews.UserInfoView) *UserInfo {
	res := &UserInfo{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Icon != nil {
		res.Icon = *vres.Icon
	}
	return res
}

// newUserInfoView projects result type UserInfo to projected type UserInfoView
// using the "default" view.
func newUserInfoView(res *UserInfo) *usermethodviews.UserInfoView {
	vres := &usermethodviews.UserInfoView{
		ID:    &res.ID,
		Name:  &res.Name,
		Email: &res.Email,
		Icon:  &res.Icon,
	}
	return vres
}

// newUserInfoViewChangeInfo projects result type UserInfo to projected type
// UserInfoView using the "changeInfo" view.
func newUserInfoViewChangeInfo(res *UserInfo) *usermethodviews.UserInfoView {
	vres := &usermethodviews.UserInfoView{
		ID:   &res.ID,
		Name: &res.Name,
		Icon: &res.Icon,
	}
	return vres
}

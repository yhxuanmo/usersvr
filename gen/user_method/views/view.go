// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userMethod views
//
// Command:
// $ goa gen usersvr/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// UserInfo is the viewed result type that is projected based on a view.
type UserInfo struct {
	// Type to project
	Projected *UserInfoView
	// View to render
	View string
}

// UserInfoView is a type that runs validations on a projected type.
type UserInfoView struct {
	// ID is the unique id of the bottle.
	ID *int
	// Name of bottle
	Name *string
	// Vintage of bottle
	Email *string
	// Description of bottle
	Icon     *string
	Password *string
	Activate *bool
}

var (
	// UserInfoMap is a map of attribute names in result type UserInfo indexed by
	// view name.
	UserInfoMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"email",
			"icon",
			"activate",
		},
		"changeInfo": []string{
			"id",
			"name",
			"icon",
		},
	}
)

// ValidateUserInfo runs the validations defined on the viewed result type
// UserInfo.
func ValidateUserInfo(result *UserInfo) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserInfoView(result.Projected)
	case "changeInfo":
		err = ValidateUserInfoViewChangeInfo(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "changeInfo"})
	}
	return
}

// ValidateUserInfoView runs the validations defined on UserInfoView using the
// "default" view.
func ValidateUserInfoView(result *UserInfoView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Icon == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("icon", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 100, false))
		}
	}
	if result.Email != nil {
		if utf8.RuneCountInString(*result.Email) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.email", *result.Email, utf8.RuneCountInString(*result.Email), 100, false))
		}
	}
	if result.Icon != nil {
		if utf8.RuneCountInString(*result.Icon) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.icon", *result.Icon, utf8.RuneCountInString(*result.Icon), 2000, false))
		}
	}
	return
}

// ValidateUserInfoViewChangeInfo runs the validations defined on UserInfoView
// using the "changeInfo" view.
func ValidateUserInfoViewChangeInfo(result *UserInfoView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Icon == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("icon", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 100, false))
		}
	}
	if result.Icon != nil {
		if utf8.RuneCountInString(*result.Icon) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.icon", *result.Icon, utf8.RuneCountInString(*result.Icon), 2000, false))
		}
	}
	return
}

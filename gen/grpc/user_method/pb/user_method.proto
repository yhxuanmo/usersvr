// Code generated with goa v3.0.2, DO NOT EDIT.
//
// userMethod protocol buffer definition
//
// Command:
// $ goa gen usersvr/design

syntax = "proto3";

package user_method;

option go_package = "user_methodpb";

// The storage service makes it possible to view, add or remove wine bottles.
service UserMethod {
	// register user
	rpc Register (RegisterRequest) returns (RegisterResponse);
	// Show user info
	rpc Show (ShowRequest) returns (ShowResponse);
	// Creates a valid JWT
	rpc Login (LoginRequest) returns (LoginResponse);
	// Add new bottle and return its ID.
	rpc ChangeInfo (ChangeInfoRequest) returns (ChangeInfoResponse);
	// Remove bottle from storage
	rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse);
	// Rate bottles by IDs
	rpc ForgotPassword (ForgotPasswordRequest) returns (ForgotPasswordResponse);
	// Add n number of bottles and return their IDs. This is a multipart request
// and each part has field name 'bottle' and contains the encoded bottle info
// to be added.
	rpc ChangeEmail (ChangeEmailRequest) returns (ChangeEmailResponse);
	// send verify code to email
	rpc SendVerifyCode (SendVerifyCodeRequest) returns (SendVerifyCodeResponse);
	// activate
	rpc Activate (ActivateRequest) returns (ActivateResponse);
}

message RegisterRequest {
	// email used to perform login
	string email = 1;
	// Password used to perform signin
	string password = 2;
}

message RegisterResponse {
	// code
	sint32 code = 1;
	// message
	string message_ = 2;
	map<string, string> data = 3;
}

message ShowNotFoundError {
	// Message of error
	string message_ = 1;
	// ID of missing user
	string id = 2;
}

message ShowRequest {
}

message ShowResponse {
	// ID is the unique id of the bottle.
	sint32 id = 8;
	// Name of bottle
	string name = 1;
	// Vintage of bottle
	string email = 2;
	// Description of bottle
	string icon = 3;
	string password = 5;
	bool activate = 6;
}

message LoginRequest {
	// Username used to perform signin
	string email = 1;
	// Password used to perform signin
	string password = 2;
}

message LoginResponse {
	// JWT token
	string jwt = 1;
}

message ChangeInfoRequest {
	// name of user
	string name = 2;
	// icon of user
	string icon = 3;
}

message ChangeInfoResponse {
	// ID is the unique id of the bottle.
	sint32 id = 8;
	// Name of bottle
	string name = 1;
	// Vintage of bottle
	string email = 2;
	// Description of bottle
	string icon = 3;
	string password = 5;
	bool activate = 6;
}

message ChangePasswordRequest {
	// old password
	string old_password = 2;
	// new password
	string new_password = 3;
}

message ChangePasswordResponse {
	// code
	sint32 code = 1;
	// message
	string message_ = 2;
	map<string, string> data = 3;
}

message ForgotPasswordRequest {
	string code = 1;
	string new_password = 2;
	string email = 3;
}

message ForgotPasswordResponse {
	// code
	sint32 code = 1;
	// message
	string message_ = 2;
	map<string, string> data = 3;
}

message ChangeEmailRequest {
	string email = 2;
}

message ChangeEmailResponse {
	// code
	sint32 code = 1;
	// message
	string message_ = 2;
	map<string, string> data = 3;
}

message SendVerifyCodeRequest {
	string email = 1;
}

message SendVerifyCodeResponse {
	// code
	sint32 code = 1;
	// message
	string message_ = 2;
	map<string, string> data = 3;
}

message ActivateRequest {
	string code = 1;
}

message ActivateResponse {
	// code
	sint32 code = 1;
	// message
	string message_ = 2;
	map<string, string> data = 3;
}

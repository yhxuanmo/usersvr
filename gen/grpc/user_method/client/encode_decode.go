// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userMethod gRPC client encoders and decoders
//
// Command:
// $ goa gen usersvr/design

package client

import (
	"context"
	user_methodpb "usersvr/gen/grpc/user_method/pb"
	usermethod "usersvr/gen/user_method"
	usermethodviews "usersvr/gen/user_method/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildRegisterFunc builds the remote method to invoke for "userMethod"
// service "register" endpoint.
func BuildRegisterFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Register(ctx, reqpb.(*user_methodpb.RegisterRequest), opts...)
	}
}

// EncodeRegisterRequest encodes requests sent to userMethod register endpoint.
func EncodeRegisterRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.RegisterPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "register", "*usermethod.RegisterPayload", v)
	}
	return NewRegisterRequest(payload), nil
}

// DecodeRegisterResponse decodes responses from the userMethod register
// endpoint.
func DecodeRegisterResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_methodpb.RegisterResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "register", "*user_methodpb.RegisterResponse", v)
	}
	res := NewRegisterResult(message)
	return res, nil
}

// BuildShowFunc builds the remote method to invoke for "userMethod" service
// "show" endpoint.
func BuildShowFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Show(ctx, reqpb.(*user_methodpb.ShowRequest), opts...)
	}
}

// EncodeShowRequest encodes requests sent to userMethod show endpoint.
func EncodeShowRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.ShowPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "show", "*usermethod.ShowPayload", v)
	}
	if payload.View != nil {
		(*md).Append("view", *payload.View)
	}
	(*md).Append("authorization", payload.Token)
	return NewShowRequest(), nil
}

// DecodeShowResponse decodes responses from the userMethod show endpoint.
func DecodeShowResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*user_methodpb.ShowResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "show", "*user_methodpb.ShowResponse", v)
	}
	res := NewShowResult(message)
	vres := &usermethodviews.UserInfo{Projected: res, View: view}
	if err := usermethodviews.ValidateUserInfo(vres); err != nil {
		return nil, err
	}
	return usermethod.NewUserInfo(vres), nil
}

// BuildLoginFunc builds the remote method to invoke for "userMethod" service
// "login" endpoint.
func BuildLoginFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Login(ctx, reqpb.(*user_methodpb.LoginRequest), opts...)
	}
}

// EncodeLoginRequest encodes requests sent to userMethod login endpoint.
func EncodeLoginRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.LoginPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "login", "*usermethod.LoginPayload", v)
	}
	return NewLoginRequest(payload), nil
}

// DecodeLoginResponse decodes responses from the userMethod login endpoint.
func DecodeLoginResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_methodpb.LoginResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "login", "*user_methodpb.LoginResponse", v)
	}
	res := NewLoginResult(message)
	return res, nil
}

// BuildChangeInfoFunc builds the remote method to invoke for "userMethod"
// service "changeInfo" endpoint.
func BuildChangeInfoFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.ChangeInfo(ctx, reqpb.(*user_methodpb.ChangeInfoRequest), opts...)
	}
}

// EncodeChangeInfoRequest encodes requests sent to userMethod changeInfo
// endpoint.
func EncodeChangeInfoRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.ChangeInfoPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "changeInfo", "*usermethod.ChangeInfoPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewChangeInfoRequest(payload), nil
}

// DecodeChangeInfoResponse decodes responses from the userMethod changeInfo
// endpoint.
func DecodeChangeInfoResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*user_methodpb.ChangeInfoResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "changeInfo", "*user_methodpb.ChangeInfoResponse", v)
	}
	res := NewChangeInfoResult(message)
	vres := &usermethodviews.UserInfo{Projected: res, View: view}
	if err := usermethodviews.ValidateUserInfo(vres); err != nil {
		return nil, err
	}
	return usermethod.NewUserInfo(vres), nil
}

// BuildChangePasswordFunc builds the remote method to invoke for "userMethod"
// service "changePassword" endpoint.
func BuildChangePasswordFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.ChangePassword(ctx, reqpb.(*user_methodpb.ChangePasswordRequest), opts...)
	}
}

// EncodeChangePasswordRequest encodes requests sent to userMethod
// changePassword endpoint.
func EncodeChangePasswordRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.ChangePasswordPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "changePassword", "*usermethod.ChangePasswordPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewChangePasswordRequest(payload), nil
}

// DecodeChangePasswordResponse decodes responses from the userMethod
// changePassword endpoint.
func DecodeChangePasswordResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_methodpb.ChangePasswordResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "changePassword", "*user_methodpb.ChangePasswordResponse", v)
	}
	res := NewChangePasswordResult(message)
	return res, nil
}

// BuildForgotPasswordFunc builds the remote method to invoke for "userMethod"
// service "forgotPassword" endpoint.
func BuildForgotPasswordFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.ForgotPassword(ctx, reqpb.(*user_methodpb.ForgotPasswordRequest), opts...)
	}
}

// EncodeForgotPasswordRequest encodes requests sent to userMethod
// forgotPassword endpoint.
func EncodeForgotPasswordRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.ForgotPasswordPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "forgotPassword", "*usermethod.ForgotPasswordPayload", v)
	}
	return NewForgotPasswordRequest(payload), nil
}

// DecodeForgotPasswordResponse decodes responses from the userMethod
// forgotPassword endpoint.
func DecodeForgotPasswordResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_methodpb.ForgotPasswordResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "forgotPassword", "*user_methodpb.ForgotPasswordResponse", v)
	}
	res := NewForgotPasswordResult(message)
	return res, nil
}

// BuildChangeEmailFunc builds the remote method to invoke for "userMethod"
// service "changeEmail" endpoint.
func BuildChangeEmailFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.ChangeEmail(ctx, reqpb.(*user_methodpb.ChangeEmailRequest), opts...)
	}
}

// EncodeChangeEmailRequest encodes requests sent to userMethod changeEmail
// endpoint.
func EncodeChangeEmailRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.ChangeEmailPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "changeEmail", "*usermethod.ChangeEmailPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewChangeEmailRequest(payload), nil
}

// DecodeChangeEmailResponse decodes responses from the userMethod changeEmail
// endpoint.
func DecodeChangeEmailResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_methodpb.ChangeEmailResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "changeEmail", "*user_methodpb.ChangeEmailResponse", v)
	}
	res := NewChangeEmailResult(message)
	return res, nil
}

// BuildSendVerifyCodeFunc builds the remote method to invoke for "userMethod"
// service "sendVerifyCode" endpoint.
func BuildSendVerifyCodeFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.SendVerifyCode(ctx, reqpb.(*user_methodpb.SendVerifyCodeRequest), opts...)
	}
}

// EncodeSendVerifyCodeRequest encodes requests sent to userMethod
// sendVerifyCode endpoint.
func EncodeSendVerifyCodeRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.SendVerifyCodePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "sendVerifyCode", "*usermethod.SendVerifyCodePayload", v)
	}
	return NewSendVerifyCodeRequest(payload), nil
}

// DecodeSendVerifyCodeResponse decodes responses from the userMethod
// sendVerifyCode endpoint.
func DecodeSendVerifyCodeResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_methodpb.SendVerifyCodeResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "sendVerifyCode", "*user_methodpb.SendVerifyCodeResponse", v)
	}
	res := NewSendVerifyCodeResult(message)
	return res, nil
}

// BuildActivateFunc builds the remote method to invoke for "userMethod"
// service "activate" endpoint.
func BuildActivateFunc(grpccli user_methodpb.UserMethodClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Activate(ctx, reqpb.(*user_methodpb.ActivateRequest), opts...)
	}
}

// EncodeActivateRequest encodes requests sent to userMethod activate endpoint.
func EncodeActivateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usermethod.ActivatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "activate", "*usermethod.ActivatePayload", v)
	}
	return NewActivateRequest(payload), nil
}

// DecodeActivateResponse decodes responses from the userMethod activate
// endpoint.
func DecodeActivateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_methodpb.ActivateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userMethod", "activate", "*user_methodpb.ActivateResponse", v)
	}
	res := NewActivateResult(message)
	return res, nil
}

// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userMethod gRPC client CLI support package
//
// Command:
// $ goa gen usersvr/design

package client

import (
	"encoding/json"
	"fmt"
	user_methodpb "usersvr/gen/grpc/user_method/pb"
	usermethod "usersvr/gen/user_method"
)

// BuildRegisterPayload builds the payload for the userMethod register endpoint
// from CLI flags.
func BuildRegisterPayload(userMethodRegisterMessage string) (*usermethod.RegisterPayload, error) {
	var err error
	var message user_methodpb.RegisterRequest
	{
		if userMethodRegisterMessage != "" {
			err = json.Unmarshal([]byte(userMethodRegisterMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"123@email.com\",\n      \"password\": \"password\"\n   }'")
			}
		}
	}
	v := &usermethod.RegisterPayload{
		Email:    message.Email,
		Password: message.Password,
	}
	return v, nil
}

// BuildShowPayload builds the payload for the userMethod show endpoint from
// CLI flags.
func BuildShowPayload(userMethodShowView string, userMethodShowToken string) (*usermethod.ShowPayload, error) {
	var view *string
	{
		if userMethodShowView != "" {
			view = &userMethodShowView
		}
	}
	var token string
	{
		token = userMethodShowToken
	}
	v := &usermethod.ShowPayload{}
	v.View = view
	v.Token = token
	return v, nil
}

// BuildLoginPayload builds the payload for the userMethod login endpoint from
// CLI flags.
func BuildLoginPayload(userMethodLoginMessage string) (*usermethod.LoginPayload, error) {
	var err error
	var message user_methodpb.LoginRequest
	{
		if userMethodLoginMessage != "" {
			err = json.Unmarshal([]byte(userMethodLoginMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"123@email.com\",\n      \"password\": \"password\"\n   }'")
			}
		}
	}
	v := &usermethod.LoginPayload{
		Email:    message.Email,
		Password: message.Password,
	}
	return v, nil
}

// BuildChangeInfoPayload builds the payload for the userMethod changeInfo
// endpoint from CLI flags.
func BuildChangeInfoPayload(userMethodChangeInfoMessage string, userMethodChangeInfoToken string) (*usermethod.ChangeInfoPayload, error) {
	var err error
	var message user_methodpb.ChangeInfoRequest
	{
		if userMethodChangeInfoMessage != "" {
			err = json.Unmarshal([]byte(userMethodChangeInfoMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"icon\": \"Qui et nostrum.\",\n      \"name\": \"Dolorem et quasi quas ab.\"\n   }'")
			}
		}
	}
	var token string
	{
		token = userMethodChangeInfoToken
	}
	v := &usermethod.ChangeInfoPayload{
		Name: message.Name,
		Icon: message.Icon,
	}
	v.Token = token
	return v, nil
}

// BuildChangePasswordPayload builds the payload for the userMethod
// changePassword endpoint from CLI flags.
func BuildChangePasswordPayload(userMethodChangePasswordMessage string, userMethodChangePasswordToken string) (*usermethod.ChangePasswordPayload, error) {
	var err error
	var message user_methodpb.ChangePasswordRequest
	{
		if userMethodChangePasswordMessage != "" {
			err = json.Unmarshal([]byte(userMethodChangePasswordMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"newPassword\": \"new password\",\n      \"oldPassword\": \"old password\"\n   }'")
			}
		}
	}
	var token string
	{
		token = userMethodChangePasswordToken
	}
	v := &usermethod.ChangePasswordPayload{
		OldPassword: message.OldPassword,
		NewPassword: message.NewPassword,
	}
	v.Token = token
	return v, nil
}

// BuildForgotPasswordPayload builds the payload for the userMethod
// forgotPassword endpoint from CLI flags.
func BuildForgotPasswordPayload(userMethodForgotPasswordMessage string) (*usermethod.ForgotPasswordPayload, error) {
	var err error
	var message user_methodpb.ForgotPasswordRequest
	{
		if userMethodForgotPasswordMessage != "" {
			err = json.Unmarshal([]byte(userMethodForgotPasswordMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"code\": \"1234\",\n      \"email\": \"Id deleniti.\",\n      \"newPassword\": \"Corporis autem ut.\"\n   }'")
			}
		}
	}
	v := &usermethod.ForgotPasswordPayload{
		Code:        message.Code,
		NewPassword: message.NewPassword,
		Email:       message.Email,
	}
	return v, nil
}

// BuildChangeEmailPayload builds the payload for the userMethod changeEmail
// endpoint from CLI flags.
func BuildChangeEmailPayload(userMethodChangeEmailMessage string, userMethodChangeEmailToken string) (*usermethod.ChangeEmailPayload, error) {
	var err error
	var message user_methodpb.ChangeEmailRequest
	{
		if userMethodChangeEmailMessage != "" {
			err = json.Unmarshal([]byte(userMethodChangeEmailMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"Accusamus rerum.\"\n   }'")
			}
		}
	}
	var token string
	{
		token = userMethodChangeEmailToken
	}
	v := &usermethod.ChangeEmailPayload{
		Email: message.Email,
	}
	v.Token = token
	return v, nil
}

// BuildSendVerifyCodePayload builds the payload for the userMethod
// sendVerifyCode endpoint from CLI flags.
func BuildSendVerifyCodePayload(userMethodSendVerifyCodeMessage string) (*usermethod.SendVerifyCodePayload, error) {
	var err error
	var message user_methodpb.SendVerifyCodeRequest
	{
		if userMethodSendVerifyCodeMessage != "" {
			err = json.Unmarshal([]byte(userMethodSendVerifyCodeMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"Sint quos.\"\n   }'")
			}
		}
	}
	v := &usermethod.SendVerifyCodePayload{
		Email: message.Email,
	}
	return v, nil
}

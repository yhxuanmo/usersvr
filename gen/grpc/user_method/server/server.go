// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userMethod gRPC server
//
// Command:
// $ goa gen usersvr/design

package server

import (
	"context"
	user_methodpb "usersvr/gen/grpc/user_method/pb"
	usermethod "usersvr/gen/user_method"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the user_methodpb.UserMethodServer interface.
type Server struct {
	RegisterH       goagrpc.UnaryHandler
	ShowH           goagrpc.UnaryHandler
	LoginH          goagrpc.UnaryHandler
	ChangeInfoH     goagrpc.UnaryHandler
	ChangePasswordH goagrpc.UnaryHandler
	ForgotPasswordH goagrpc.UnaryHandler
	ChangeEmailH    goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the userMethod service endpoints.
func New(e *usermethod.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		RegisterH:       NewRegisterHandler(e.Register, uh),
		ShowH:           NewShowHandler(e.Show, uh),
		LoginH:          NewLoginHandler(e.Login, uh),
		ChangeInfoH:     NewChangeInfoHandler(e.ChangeInfo, uh),
		ChangePasswordH: NewChangePasswordHandler(e.ChangePassword, uh),
		ForgotPasswordH: NewForgotPasswordHandler(e.ForgotPassword, uh),
		ChangeEmailH:    NewChangeEmailHandler(e.ChangeEmail, uh),
	}
}

// NewRegisterHandler creates a gRPC handler which serves the "userMethod"
// service "register" endpoint.
func NewRegisterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRegisterRequest, EncodeRegisterResponse)
	}
	return h
}

// Register implements the "Register" method in user_methodpb.UserMethodServer
// interface.
func (s *Server) Register(ctx context.Context, message *user_methodpb.RegisterRequest) (*user_methodpb.RegisterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "register")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userMethod")
	resp, err := s.RegisterH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_methodpb.RegisterResponse), nil
}

// NewShowHandler creates a gRPC handler which serves the "userMethod" service
// "show" endpoint.
func NewShowHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeShowRequest, EncodeShowResponse)
	}
	return h
}

// Show implements the "Show" method in user_methodpb.UserMethodServer
// interface.
func (s *Server) Show(ctx context.Context, message *user_methodpb.ShowRequest) (*user_methodpb.ShowResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "show")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userMethod")
	resp, err := s.ShowH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "not_found":
				er := err.(*usermethod.NotFound)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewShowNotFoundError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_methodpb.ShowResponse), nil
}

// NewLoginHandler creates a gRPC handler which serves the "userMethod" service
// "login" endpoint.
func NewLoginHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLoginRequest, EncodeLoginResponse)
	}
	return h
}

// Login implements the "Login" method in user_methodpb.UserMethodServer
// interface.
func (s *Server) Login(ctx context.Context, message *user_methodpb.LoginRequest) (*user_methodpb.LoginResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "login")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userMethod")
	resp, err := s.LoginH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_methodpb.LoginResponse), nil
}

// NewChangeInfoHandler creates a gRPC handler which serves the "userMethod"
// service "changeInfo" endpoint.
func NewChangeInfoHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeChangeInfoRequest, EncodeChangeInfoResponse)
	}
	return h
}

// ChangeInfo implements the "ChangeInfo" method in
// user_methodpb.UserMethodServer interface.
func (s *Server) ChangeInfo(ctx context.Context, message *user_methodpb.ChangeInfoRequest) (*user_methodpb.ChangeInfoResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "changeInfo")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userMethod")
	resp, err := s.ChangeInfoH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_methodpb.ChangeInfoResponse), nil
}

// NewChangePasswordHandler creates a gRPC handler which serves the
// "userMethod" service "changePassword" endpoint.
func NewChangePasswordHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeChangePasswordRequest, EncodeChangePasswordResponse)
	}
	return h
}

// ChangePassword implements the "ChangePassword" method in
// user_methodpb.UserMethodServer interface.
func (s *Server) ChangePassword(ctx context.Context, message *user_methodpb.ChangePasswordRequest) (*user_methodpb.ChangePasswordResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "changePassword")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userMethod")
	resp, err := s.ChangePasswordH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_methodpb.ChangePasswordResponse), nil
}

// NewForgotPasswordHandler creates a gRPC handler which serves the
// "userMethod" service "forgotPassword" endpoint.
func NewForgotPasswordHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeForgotPasswordRequest, EncodeForgotPasswordResponse)
	}
	return h
}

// ForgotPassword implements the "ForgotPassword" method in
// user_methodpb.UserMethodServer interface.
func (s *Server) ForgotPassword(ctx context.Context, message *user_methodpb.ForgotPasswordRequest) (*user_methodpb.ForgotPasswordResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "forgotPassword")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userMethod")
	resp, err := s.ForgotPasswordH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_methodpb.ForgotPasswordResponse), nil
}

// NewChangeEmailHandler creates a gRPC handler which serves the "userMethod"
// service "changeEmail" endpoint.
func NewChangeEmailHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeChangeEmailRequest, EncodeChangeEmailResponse)
	}
	return h
}

// ChangeEmail implements the "ChangeEmail" method in
// user_methodpb.UserMethodServer interface.
func (s *Server) ChangeEmail(ctx context.Context, message *user_methodpb.ChangeEmailRequest) (*user_methodpb.ChangeEmailResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "changeEmail")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userMethod")
	resp, err := s.ChangeEmailH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_methodpb.ChangeEmailResponse), nil
}

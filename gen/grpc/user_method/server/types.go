// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userMethod gRPC server types
//
// Command:
// $ goa gen usersvr/design

package server

import (
	user_methodpb "usersvr/gen/grpc/user_method/pb"
	usermethod "usersvr/gen/user_method"
	usermethodviews "usersvr/gen/user_method/views"
)

// NewRegisterPayload builds the payload of the "register" endpoint of the
// "userMethod" service from the gRPC request type.
func NewRegisterPayload(message *user_methodpb.RegisterRequest) *usermethod.RegisterPayload {
	v := &usermethod.RegisterPayload{
		Email:    message.Email,
		Password: message.Password,
	}
	return v
}

// NewRegisterResponse builds the gRPC response type from the result of the
// "register" endpoint of the "userMethod" service.
func NewRegisterResponse(result *usermethod.ResponseResult) *user_methodpb.RegisterResponse {
	message := &user_methodpb.RegisterResponse{
		Code: int32(result.Code),
	}
	if result.Message != nil {
		message.Message_ = *result.Message
	}
	if result.Data != nil {
		message.Data = make(map[string]string, len(result.Data))
		for key, val := range result.Data {
			tk := key
			tv := val
			message.Data[tk] = tv
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the "userMethod"
// service from the gRPC request type.
func NewShowPayload(view *string, token string) *usermethod.ShowPayload {
	v := &usermethod.ShowPayload{}
	v.View = view
	v.Token = token
	return v
}

// NewShowResponse builds the gRPC response type from the result of the "show"
// endpoint of the "userMethod" service.
func NewShowResponse(result *usermethodviews.UserInfoView) *user_methodpb.ShowResponse {
	message := &user_methodpb.ShowResponse{}
	if result.ID != nil {
		message.Id = int32(*result.ID)
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Icon != nil {
		message.Icon = *result.Icon
	}
	if result.Password != nil {
		message.Password = *result.Password
	}
	if result.Activate != nil {
		message.Activate = *result.Activate
	}
	return message
}

// NewShowNotFoundError builds the gRPC error response type from the error of
// the "show" endpoint of the "userMethod" service.
func NewShowNotFoundError(er *usermethod.NotFound) *user_methodpb.ShowNotFoundError {
	message := &user_methodpb.ShowNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewLoginPayload builds the payload of the "login" endpoint of the
// "userMethod" service from the gRPC request type.
func NewLoginPayload(message *user_methodpb.LoginRequest) *usermethod.LoginPayload {
	v := &usermethod.LoginPayload{
		Email:    message.Email,
		Password: message.Password,
	}
	return v
}

// NewLoginResponse builds the gRPC response type from the result of the
// "login" endpoint of the "userMethod" service.
func NewLoginResponse(result *usermethod.Creds) *user_methodpb.LoginResponse {
	message := &user_methodpb.LoginResponse{
		Jwt: result.JWT,
	}
	return message
}

// NewChangeInfoPayload builds the payload of the "changeInfo" endpoint of the
// "userMethod" service from the gRPC request type.
func NewChangeInfoPayload(message *user_methodpb.ChangeInfoRequest, token string) *usermethod.ChangeInfoPayload {
	v := &usermethod.ChangeInfoPayload{
		Name: message.Name,
		Icon: message.Icon,
	}
	v.Token = token
	return v
}

// NewChangeInfoResponse builds the gRPC response type from the result of the
// "changeInfo" endpoint of the "userMethod" service.
func NewChangeInfoResponse(result *usermethodviews.UserInfoView) *user_methodpb.ChangeInfoResponse {
	message := &user_methodpb.ChangeInfoResponse{}
	if result.ID != nil {
		message.Id = int32(*result.ID)
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Icon != nil {
		message.Icon = *result.Icon
	}
	if result.Password != nil {
		message.Password = *result.Password
	}
	if result.Activate != nil {
		message.Activate = *result.Activate
	}
	return message
}

// NewChangePasswordPayload builds the payload of the "changePassword" endpoint
// of the "userMethod" service from the gRPC request type.
func NewChangePasswordPayload(message *user_methodpb.ChangePasswordRequest, token string) *usermethod.ChangePasswordPayload {
	v := &usermethod.ChangePasswordPayload{
		OldPassword: message.OldPassword,
		NewPassword: message.NewPassword,
	}
	v.Token = token
	return v
}

// NewChangePasswordResponse builds the gRPC response type from the result of
// the "changePassword" endpoint of the "userMethod" service.
func NewChangePasswordResponse(result *usermethod.ResponseResult) *user_methodpb.ChangePasswordResponse {
	message := &user_methodpb.ChangePasswordResponse{
		Code: int32(result.Code),
	}
	if result.Message != nil {
		message.Message_ = *result.Message
	}
	if result.Data != nil {
		message.Data = make(map[string]string, len(result.Data))
		for key, val := range result.Data {
			tk := key
			tv := val
			message.Data[tk] = tv
		}
	}
	return message
}

// NewForgotPasswordPayload builds the payload of the "forgotPassword" endpoint
// of the "userMethod" service from the gRPC request type.
func NewForgotPasswordPayload(message *user_methodpb.ForgotPasswordRequest) *usermethod.ForgotPasswordPayload {
	v := &usermethod.ForgotPasswordPayload{
		Code:        message.Code,
		NewPassword: message.NewPassword,
		Email:       message.Email,
	}
	return v
}

// NewForgotPasswordResponse builds the gRPC response type from the result of
// the "forgotPassword" endpoint of the "userMethod" service.
func NewForgotPasswordResponse(result *usermethod.ResponseResult) *user_methodpb.ForgotPasswordResponse {
	message := &user_methodpb.ForgotPasswordResponse{
		Code: int32(result.Code),
	}
	if result.Message != nil {
		message.Message_ = *result.Message
	}
	if result.Data != nil {
		message.Data = make(map[string]string, len(result.Data))
		for key, val := range result.Data {
			tk := key
			tv := val
			message.Data[tk] = tv
		}
	}
	return message
}

// NewChangeEmailPayload builds the payload of the "changeEmail" endpoint of
// the "userMethod" service from the gRPC request type.
func NewChangeEmailPayload(message *user_methodpb.ChangeEmailRequest, token string) *usermethod.ChangeEmailPayload {
	v := &usermethod.ChangeEmailPayload{
		Email: message.Email,
	}
	v.Token = token
	return v
}

// NewChangeEmailResponse builds the gRPC response type from the result of the
// "changeEmail" endpoint of the "userMethod" service.
func NewChangeEmailResponse(result *usermethod.ResponseResult) *user_methodpb.ChangeEmailResponse {
	message := &user_methodpb.ChangeEmailResponse{
		Code: int32(result.Code),
	}
	if result.Message != nil {
		message.Message_ = *result.Message
	}
	if result.Data != nil {
		message.Data = make(map[string]string, len(result.Data))
		for key, val := range result.Data {
			tk := key
			tv := val
			message.Data[tk] = tv
		}
	}
	return message
}

// NewSendVerifyCodePayload builds the payload of the "sendVerifyCode" endpoint
// of the "userMethod" service from the gRPC request type.
func NewSendVerifyCodePayload(message *user_methodpb.SendVerifyCodeRequest) *usermethod.SendVerifyCodePayload {
	v := &usermethod.SendVerifyCodePayload{
		Email: message.Email,
	}
	return v
}

// NewSendVerifyCodeResponse builds the gRPC response type from the result of
// the "sendVerifyCode" endpoint of the "userMethod" service.
func NewSendVerifyCodeResponse(result *usermethod.ResponseResult) *user_methodpb.SendVerifyCodeResponse {
	message := &user_methodpb.SendVerifyCodeResponse{
		Code: int32(result.Code),
	}
	if result.Message != nil {
		message.Message_ = *result.Message
	}
	if result.Data != nil {
		message.Data = make(map[string]string, len(result.Data))
		for key, val := range result.Data {
			tk := key
			tv := val
			message.Data[tk] = tv
		}
	}
	return message
}

// NewActivatePayload builds the payload of the "activate" endpoint of the
// "userMethod" service from the gRPC request type.
func NewActivatePayload(message *user_methodpb.ActivateRequest) *usermethod.ActivatePayload {
	v := &usermethod.ActivatePayload{
		Code: message.Code,
	}
	return v
}

// NewActivateResponse builds the gRPC response type from the result of the
// "activate" endpoint of the "userMethod" service.
func NewActivateResponse(result *usermethod.ResponseResult) *user_methodpb.ActivateResponse {
	message := &user_methodpb.ActivateResponse{
		Code: int32(result.Code),
	}
	if result.Message != nil {
		message.Message_ = *result.Message
	}
	if result.Data != nil {
		message.Data = make(map[string]string, len(result.Data))
		for key, val := range result.Data {
			tk := key
			tv := val
			message.Data[tk] = tv
		}
	}
	return message
}

// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userMethod HTTP client types
//
// Command:
// $ goa gen usersvr/design

package client

import (
	usermethod "usersvr/gen/user_method"
	usermethodviews "usersvr/gen/user_method/views"

	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "userMethod" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// email used to perform login
	Email string `form:"email" json:"email" xml:"email"`
	// Password used to perform signin
	Password string `form:"password" json:"password" xml:"password"`
}

// LoginRequestBody is the type of the "userMethod" service "login" endpoint
// HTTP request body.
type LoginRequestBody struct {
	// Username used to perform signin
	Email string `form:"email" json:"email" xml:"email"`
	// Password used to perform signin
	Password string `form:"password" json:"password" xml:"password"`
}

// ChangeInfoRequestBody is the type of the "userMethod" service "changeInfo"
// endpoint HTTP request body.
type ChangeInfoRequestBody struct {
	// Name of bottle
	Name string `form:"name" json:"name" xml:"name"`
	// Vintage of bottle
	Email string `form:"email" json:"email" xml:"email"`
	// Description of bottle
	Icon string `form:"icon" json:"icon" xml:"icon"`
}

// ChangePasswordRequestBody is the type of the "userMethod" service
// "changePassword" endpoint HTTP request body.
type ChangePasswordRequestBody struct {
	// old password
	OldPassword string `form:"oldPassword" json:"oldPassword" xml:"oldPassword"`
}

// ForgotPasswordRequestBody is the type of the "userMethod" service
// "forgotPassword" endpoint HTTP request body.
type ForgotPasswordRequestBody struct {
	Code string `form:"code" json:"code" xml:"code"`
}

// ChangeEmailRequestBody is the type of the "userMethod" service "changeEmail"
// endpoint HTTP request body.
type ChangeEmailRequestBody struct {
	Email string `form:"email" json:"email" xml:"email"`
}

// RegisterResponseBody is the type of the "userMethod" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string           `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	Data    map[string]string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ShowResponseBody is the type of the "userMethod" service "show" endpoint
// HTTP response body.
type ShowResponseBody struct {
	// ID is the unique id of the bottle.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of bottle
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Vintage of bottle
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Description of bottle
	Icon     *string `form:"icon,omitempty" json:"icon,omitempty" xml:"icon,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginResponseBody is the type of the "userMethod" service "login" endpoint
// HTTP response body.
type LoginResponseBody struct {
	// JWT token
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "userMethod" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "userMethod" service.
func NewRegisterRequestBody(p *usermethod.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "userMethod" service.
func NewLoginRequestBody(p *usermethod.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewChangeInfoRequestBody builds the HTTP request body from the payload of
// the "changeInfo" endpoint of the "userMethod" service.
func NewChangeInfoRequestBody(p *usermethod.User) *ChangeInfoRequestBody {
	body := &ChangeInfoRequestBody{
		Name:  p.Name,
		Email: p.Email,
		Icon:  p.Icon,
	}
	return body
}

// NewChangePasswordRequestBody builds the HTTP request body from the payload
// of the "changePassword" endpoint of the "userMethod" service.
func NewChangePasswordRequestBody(p *usermethod.ChangePasswordPayload) *ChangePasswordRequestBody {
	body := &ChangePasswordRequestBody{
		OldPassword: p.OldPassword,
	}
	return body
}

// NewForgotPasswordRequestBody builds the HTTP request body from the payload
// of the "forgotPassword" endpoint of the "userMethod" service.
func NewForgotPasswordRequestBody(p *usermethod.ForgotPasswordPayload) *ForgotPasswordRequestBody {
	body := &ForgotPasswordRequestBody{
		Code: p.Code,
	}
	return body
}

// NewChangeEmailRequestBody builds the HTTP request body from the payload of
// the "changeEmail" endpoint of the "userMethod" service.
func NewChangeEmailRequestBody(p *usermethod.ChangeEmailPayload) *ChangeEmailRequestBody {
	body := &ChangeEmailRequestBody{
		Email: p.Email,
	}
	return body
}

// NewRegisterResponseResultOK builds a "userMethod" service "register"
// endpoint result from a HTTP "OK" response.
func NewRegisterResponseResultOK(body *RegisterResponseBody) *usermethod.ResponseResult {
	v := &usermethod.ResponseResult{
		Code:    *body.Code,
		Message: body.Message,
	}
	if body.Data != nil {
		v.Data = make(map[string]string, len(body.Data))
		for key, val := range body.Data {
			tk := key
			tv := val
			v.Data[tk] = tv
		}
	}
	return v
}

// NewShowUserInfoOK builds a "userMethod" service "show" endpoint result from
// a HTTP "OK" response.
func NewShowUserInfoOK(body *ShowResponseBody) *usermethodviews.UserInfoView {
	v := &usermethodviews.UserInfoView{
		ID:       body.ID,
		Name:     body.Name,
		Email:    body.Email,
		Icon:     body.Icon,
		Password: body.Password,
	}
	return v
}

// NewShowNotFound builds a userMethod service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *usermethod.NotFound {
	v := &usermethod.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// NewLoginCredsOK builds a "userMethod" service "login" endpoint result from a
// HTTP "OK" response.
func NewLoginCredsOK(body *LoginResponseBody) *usermethod.Creds {
	v := &usermethod.Creds{
		JWT: *body.JWT,
	}
	return v
}

// ValidateRegisterResponseBody runs the validations defined on
// RegisterResponseBody
func ValidateRegisterResponseBody(body *RegisterResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	return
}

// ValidateLoginResponseBody runs the validations defined on LoginResponseBody
func ValidateLoginResponseBody(body *LoginResponseBody) (err error) {
	if body.JWT == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jwt", "body"))
	}
	return
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userMethod HTTP client CLI support package
//
// Command:
// $ goa gen usersvr/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"
	usermethod "usersvr/gen/user_method"

	goa "goa.design/goa/v3/pkg"
)

// BuildRegisterPayload builds the payload for the userMethod register endpoint
// from CLI flags.
func BuildRegisterPayload(userMethodRegisterBody string) (*usermethod.RegisterPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(userMethodRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"123@email.com\",\n      \"password\": \"password\"\n   }'")
		}
	}
	v := &usermethod.RegisterPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildShowPayload builds the payload for the userMethod show endpoint from
// CLI flags.
func BuildShowPayload(userMethodShowView string, userMethodShowToken string) (*usermethod.ShowPayload, error) {
	var view *string
	{
		if userMethodShowView != "" {
			view = &userMethodShowView
		}
	}
	var token string
	{
		token = userMethodShowToken
	}
	payload := &usermethod.ShowPayload{
		View:  view,
		Token: token,
	}
	return payload, nil
}

// BuildLoginPayload builds the payload for the userMethod login endpoint from
// CLI flags.
func BuildLoginPayload(userMethodLoginBody string) (*usermethod.LoginPayload, error) {
	var err error
	var body LoginRequestBody
	{
		err = json.Unmarshal([]byte(userMethodLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"123@email.com\",\n      \"password\": \"password\"\n   }'")
		}
	}
	v := &usermethod.LoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildChangeInfoPayload builds the payload for the userMethod changeInfo
// endpoint from CLI flags.
func BuildChangeInfoPayload(userMethodChangeInfoBody string) (*usermethod.User, error) {
	var err error
	var body ChangeInfoRequestBody
	{
		err = json.Unmarshal([]byte(userMethodChangeInfoBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"nwb\",\n      \"icon\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n      \"name\": \"Blue\\'s Cuvee\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if utf8.RuneCountInString(body.Email) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.email", body.Email, utf8.RuneCountInString(body.Email), 100, false))
		}
		if utf8.RuneCountInString(body.Icon) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.icon", body.Icon, utf8.RuneCountInString(body.Icon), 2000, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &usermethod.User{
		Name:  body.Name,
		Email: body.Email,
		Icon:  body.Icon,
	}
	return v, nil
}

// BuildChangePasswordPayload builds the payload for the userMethod
// changePassword endpoint from CLI flags.
func BuildChangePasswordPayload(userMethodChangePasswordBody string) (*usermethod.ChangePasswordPayload, error) {
	var err error
	var body ChangePasswordRequestBody
	{
		err = json.Unmarshal([]byte(userMethodChangePasswordBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"oldPassword\": \"old password\"\n   }'")
		}
	}
	v := &usermethod.ChangePasswordPayload{
		OldPassword: body.OldPassword,
	}
	return v, nil
}

// BuildForgotPasswordPayload builds the payload for the userMethod
// forgotPassword endpoint from CLI flags.
func BuildForgotPasswordPayload(userMethodForgotPasswordBody string) (*usermethod.ForgotPasswordPayload, error) {
	var err error
	var body ForgotPasswordRequestBody
	{
		err = json.Unmarshal([]byte(userMethodForgotPasswordBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"code\": \"1234\"\n   }'")
		}
	}
	v := &usermethod.ForgotPasswordPayload{
		Code: body.Code,
	}
	return v, nil
}

// BuildChangeEmailPayload builds the payload for the userMethod changeEmail
// endpoint from CLI flags.
func BuildChangeEmailPayload(userMethodChangeEmailBody string) (*usermethod.ChangeEmailPayload, error) {
	var err error
	var body ChangeEmailRequestBody
	{
		err = json.Unmarshal([]byte(userMethodChangeEmailBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Omnis distinctio dolorem tempore.\"\n   }'")
		}
	}
	v := &usermethod.ChangeEmailPayload{
		Email: body.Email,
	}
	return v, nil
}
